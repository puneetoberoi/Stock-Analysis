name: Test Learning System

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      test_mode:
        description: 'Use simulated data for testing'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test-learning:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3
    
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        # ‚úÖ FIXED: All packages in one block, including groq and cohere
        pip install ddgs scipy
        pip install pandas ta yfinance requests numpy aiohttp beautifulsoup4 lxml matplotlib seaborn pytrends requests-html nest_asyncio spacy textblob transformers wikipedia-api markdown vaderSentiment asyncio-throttle python-dateutil PyYAML google-generativeai groq cohere ddgs
    
    
    - name: üß™ Enable TEST_MODE
      if: ${{ github.event.inputs.test_mode == 'true' }}
      run: |
        # Replace TEST_MODE = False with TEST_MODE = True
        sed -i 's/TEST_MODE = False/TEST_MODE = True/g' src/check_outcomes.py
        echo "‚úÖ TEST_MODE enabled - will use simulated data"
    
    - name: üìä Show TEST_MODE status
      run: |
        grep "TEST_MODE" src/check_outcomes.py || echo "Pattern not found"
    
    - name: üîç Check Learning System
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
      run: |
        echo "========================================"
        echo "üß† TESTING LEARNING SYSTEM"
        echo "Mode: ${{ github.event.inputs.test_mode == 'true' && 'TEST (Simulated)' || 'PRODUCTION (Real Data)' }}"
        echo "========================================"
        cd src
        python check_outcomes.py
    
    - name: üìã Show Learning History
      if: always()
      run: |
        echo "========================================"
        echo "üìä LEARNING HISTORY FILE"
        echo "========================================"
        if [ -f "data/predictions.json" ]; then
          echo "Predictions file exists:"
          cat data/predictions.json | python -m json.tool | head -100
        else
          echo "No predictions.json found yet"
        fi
        
        if [ -f "data/patterns.json" ]; then
          echo ""
          echo "Patterns file exists:"
          cat data/patterns.json | python -m json.tool
        else
          echo "No patterns.json found yet"
        fi
    
    - name: üìà Generate Test Report
      if: always()
      run: |
        echo "========================================"
        echo "‚úÖ TEST COMPLETE"
        echo "========================================"
        echo "Check the logs above for:"
        echo "  1. Number of predictions checked"
        echo "  2. Accuracy percentage"
        echo "  3. Pattern performance"
        echo "  4. Learning insights"
